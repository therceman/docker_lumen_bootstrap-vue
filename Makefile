SHELL := /bin/bash

ifndef VERBOSE
.SILENT:
endif

-include .env
export $(shell if test -f ".env"; then (sed 's/=.*//' .env) fi;)

modules_folder = ./modules
network = app-network

preconfigure: config prepare
install_and_start: install start
run: prepare_machine preconfigure install_and_start

prod:
	sudo make -s env_prod # sudo should be here OR cloning will break
	make -s run # this should be run like this, because of .env reread
	echo "-----------------------------------------------------------"
	printf $(MSG_RED) ":::: PROD environment is ready! ::::" ; printf "\n"

dev:
	sudo make -s env_dev # sudo should be here OR cloning will break
	make -s run # this should be run like this, because of .env reread
	echo "-----------------------------------------------------------"
	printf $(MSG_GREEN) ":::: Dev environment is ready! ::::" ; printf "\n"

prepare_machine:
	if [ "$$(docker network ls | grep ${network})" = "" ]; then \
		echo "Creating shared network: ${network}"; \
		docker network create ${network}; \
	fi;
	chmod +x ./utils/env.sh

# configure all modules
config: api_config ui_config
	echo "-----------------------------------------------------------"
	printf $(MSG_GREEN) ":::: All modules configured ::::" ; printf "\n"
	echo "-----------------------------------------------------------"

# prepare all modules
prepare: api_prepare ui_prepare
	echo "-----------------------------------------------------------"
	printf $(MSG_GREEN) ":::: All modules are prepared ::::" ; printf "\n"
	echo "-----------------------------------------------------------"

# install all modules
install: api_install ui_install
	echo "-----------------------------------------------------------"
	printf $(MSG_GREEN) ":::: All modules are installed ::::" ; printf "\n"
	echo "-----------------------------------------------------------"

# start all modules
start: api_start ui_start
	echo "-----------------------------------------------------------"
	printf $(MSG_GREEN) ":::: All modules have been started ::::" ; printf "\n"
	echo "-----------------------------------------------------------"

# stop all modules
down: api_down ui_down
	echo "-----------------------------------------------------------"
	printf $(MSG_RED) ":::: All modules have been stopped! ::::" ; printf "\n"
	echo "-----------------------------------------------------------"

######## Environment Setup

env_prod:
	make -s create_env_file TRG_ENV=prod MSG_COLOR=31 # red

env_dev:
	make -s create_env_file TRG_ENV=dev MSG_COLOR=29 # white

create_env_file: # TRG_ENV=dev MSG_COLOR=34 (example args)
	# creates .env file
	printf "##########################################################################\n" > ./.env
	printf "# Warning. Content below has been automatically generated by project Makefile\n" >> ./.env
	printf "# Do not edit this file directly. See README.md -> Setup section for info \n" >> ./.env
	printf "##########################################################################\n\n" >> ./.env
	printf "Changing environment to " ; printf "\033[${MSG_COLOR}m%s\033[0m" [${TRG_ENV}]
	printf "ENV=${TRG_ENV}\n\n" >> ./.env
	printf ${DONE}

######## Module Install

api_install:
	make -s install_module MODULE=api

ui_install:
	make -s install_module MODULE=ui

install_module: # MODULE=rng-service (example arg)
	echo "Installing ${MODULE} module ..."
	echo "-----------------------------------------------------------"
	if [ "${ENV}" = "" ] | [ "$${ENV,,}" = "dev" ]; then \
		cd ${modules_folder}/${MODULE} && make -s install_dev; \
    else \
    	cd ${modules_folder}/${MODULE} && make -s install; \
    fi;
	echo "-----------------------------------------------------------"

######## Module Prepare

api_prepare:
	make -s prepare_module MODULE=api

ui_prepare:
	make -s prepare_module MODULE=ui

prepare_module: # MODULE=launcher (example arg)
	echo "Preparing ${MODULE} module ..."
	echo "-----------------------------------------------------------"
	cd ${modules_folder}/${MODULE} && make -s prepare
	echo "-----------------------------------------------------------"

######## Module Start

api_start:
	make -s start_module MODULE=api

ui_start:
	make -s start_module MODULE=ui

start_module: # MODULE=launcher (example arg)
	echo "Starting ${MODULE} module ..."
	echo "-----------------------------------------------------------"
	cd ${modules_folder}/${MODULE} && make -s start
	echo "-----------------------------------------------------------"

######## Module Stop

api_down:
	make -s down_module MODULE=api

ui_down:
	make -s down_module MODULE=ui

down_module: # MODULE=launcher (example arg)
	echo "Stopping ${MODULE} module ..."
	echo "-----------------------------------------------------------"
	cd ${modules_folder}/${MODULE} && make -s down
	echo "-----------------------------------------------------------"

######## Module Configuration

api_config:
	./utils/env.sh -m api -e ${ENV}

ui_config:
	./utils/env.sh -m ui -e ${ENV}

launcher_config:
	./utils/env.sh -m launcher -e ${ENV}

######## Docker Actions

kill_active_docker_containers:
	if [ "$$(docker ps -q)" = "" ]; then \
  		echo "There is no docker services for kill. Skipping ..."; \
    else \
		printf ${MSG_YELLOW} ">>> Warning! You are about to kill all active docker containers"; printf "\n"; \
		if $(MAKE) -s ask_confirm ; then \
			printf "Killing all active docker containers .... \n"; \
			docker kill $$(docker ps -q); \
			printf "Killing all active docker containers"; printf $(DONE); \
		fi \
    fi;

remove_all_docker_images:
	printf ${MSG_YELLOW} ">>> Warning! You are about to remove all docker images"; printf "\n"; \
	if $(MAKE) -s ask_confirm ; then \
		printf "Removing all docker images ... \n"; \
		docker image prune -f -a; \
		printf "Removing all docker images"; printf $(DONE); \
	fi

remove_all_docker_containers:
	printf ${MSG_YELLOW} ">>> Warning! You are about to remove all docker containers"; printf "\n"; \
	if $(MAKE) -s ask_confirm ; then \
		printf "Removing all docker containers ... \n"; \
		docker container prune -f; \
		printf "Removing all docker containers"; printf $(DONE); \
	fi

remove_all_docker_volumes:
	printf ${MSG_YELLOW} ">>> Warning! You are about to remove all docker volumes"; printf "\n"; \
	if $(MAKE) -s ask_confirm ; then \
		printf "Removing all docker volumes ... \n"; \
		docker volume prune -f; \
		printf "Removing all docker volumes"; printf $(DONE); \
	fi

reset_docker: kill_active_docker_containers remove_all_docker_containers remove_all_docker_images remove_all_docker_volumes

######## Helpers

ask_confirm:
	@if [[ -z "$(CI)" ]]; then \
		REPLY="" ; \
		read -p "$$(tput bold)>>> Are you sure? [y/n] > $$(tput sgr0)" -r ; \
		if [[ ! $$REPLY =~ ^[Yy]$$ ]]; then \
			printf $(_ERROR) "KO" "Stopping" ; \
			exit 1 ; \
		else \
			printf $(_TITLE) "OK" "Continuing" ; \
			exit 0; \
		fi \
	fi

######## Msg & Text Colors

_TITLE := "\033[32m[%s]\033[0m %s\n" # Green text for "printf"
_ERROR := "\033[31m[%s]\033[0m %s\n" # Red text for "printf"

DONE := " ... \033[32mdone\033[0m\n" # done green text
MSG_RED := "\033[31m%s\033[0m" # red msg
MSG_GREEN := "\033[32m%s\033[0m" # green msg
MSG_YELLOW := "$$(tput setaf 190)%s$$(tput sgr0)" # green msg
MSG_BLUE := "\033[34m%s\033[0m" # blue msg
MSG := "$$(tput setaf 153)----------------> %s$$(tput sgr0)\n" # light blue msg
# colors -> https://stackoverflow.com/questions/4332478/read-the-current-text-color-in-a-xterm/4332530#4332530